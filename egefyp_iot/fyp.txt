{% extends 'devicewebapp/base.html' %}
Connecting to PuTTy
192.168.23.1
user- pi
pwd - egefyplabs


Activating Virtual Env
c:\users\REYNARD\fyp-env\Scripts\activate 

cd devicewebservice
python manage.py runserver


NAT

how to identify for direct connection or indirect


network routing
understand how devices are connected
network penetration testing tools

internet address
physical(MAC) address
ip address

Commands on PuTTy:
arp
ip neigh show dev wlan1 

packages:
nmap
 
 use command to see signal strength if device is indirectly connected to the access point, u cannot see the signal strength

<img src="{% static 'wifi_4bar.png' %}" alt="image not found" class="center" width="5%">

nmap -sn 192.168.23.0/24 Ctrl V to see progress of scan
output:
Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-15 17:13 Malay Peninsula Standard Time
Nmap scan report for fypgw-S03.byteacs.com (192.168.23.1)
Host is up (0.043s latency).
MAC Address: 34:C9:F0:90:41:FD (LM Technologies)
Nmap scan report for esp32-8CB604.byteacs.com (192.168.23.141)
Host is up.
MAC Address: 94:B9:7E:8C:B6:04 (Espressif)
Nmap scan report for LAPTOP-1KKIANDS.byteacs.com (192.168.23.162)
Host is up.
Nmap done: 256 IP addresses (3 hosts up) scanned in 50.63 seconds



{'nmap':
 {'command_line': 'nmap -oX - -sn 192.168.23.0/24', 'scaninfo': {}, 'scanstats': {'timestr': 'Mon Dec 18 10:23:40 2023', 'elapsed': '28.03', 'uphosts': '3', 'downhosts': '253', 'totalhosts': '256'}},
  'scan': {'192.168.23.1': {
    'hostnames': [{'name': 'fypgw-S03.byteacs.com', 'type': 'PTR'}], 'addresses': {'ipv4': '192.168.23.1', 'mac': '34:C9:F0:90:41:FD'}, 'vendor': {'34:C9:F0:90:41:FD': 'LM Technologies'}, 'status': {'state': 'up', 'reason': 'arp-response'}}, 
  '192.168.23.141': {
    'hostnames': [{'name': 'esp32-8CB604.byteacs.com', 'type': 'PTR'}], 'addresses': {'ipv4': '192.168.23.141', 'mac': '94:B9:7E:8C:B6:04'}, 'vendor': {'94:B9:7E:8C:B6:04': 'Espressif'}, 'status': {'state': 'up', 'reason': 'arp-response'}}, 
  '192.168.23.162': {
    'hostnames': [{'name': 'LAPTOP-1KKIANDS.byteacs.com', 'type': 'PTR'}], 'addresses': {'ipv4': '192.168.23.162'}, 'vendor': {}, 'status': {'state': 'up', 'reason': 'localhost-response'}}}}

  # Sample Output from "iw dev wlan1 station dump"
output_signal = """Station 3c:9c:0f:61:3b:1d (on wlan1)
signal:         -37 dBm
Station 9c:9c:0d:11:3b:1d (on wlan1)
signal:         -40 dBm"""

# Split the lines into a list
lines = output_signal.splitlines()


nospc_lines = []

# Remove all whitespaces and add into a list
for x in lines:
    y = "".join(x.split())
    nospc_lines.append(y)

for x in nospc_lines:
    if "Station" in x:
        x1 =x.replace("Station", '')
        y = x1[0:17]
        print(y)
    elif "signal" in x:
        t2 = x.replace("signal:", '')
        print(t2)




 #     command = "sudo nmap -sn -T3 192.168.23.0/24"
    #     result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, text=True)
    #     print(result)

    # # Use re package to extract substrings from the result

    #     # 'Starting Nmap 7.70 ( https://nmap.org ) at 2023-12-26 09:44 UTC\n
    #     # Nmap scan report for esp32-8CB604.byteacs.com (192.168.23.141)\n
    #     # Host is up (0.018s latency).\n
    #     # MAC Address: 94:B9:7E:8C:B6:04 (Espressif)\n
    #     # Nmap scan report for fypgw-S03 (192.168.23.1)\n
    #     # Host is up.\n
    #     # Nmap done: 256 IP addresses (2 hosts up) scanned in 13.69 seconds\n'

    #     # hostname_pattern = re.compile(r'Nmap scan report for (\S+)')
    #     # status_pattern = re.compile(r'Host is (\S+){2}')
    #     # mac_pattern = re.compile(r'MAC Address: (\S+)')
        
    #     # hostname_matches = hostname_pattern.findall(result.stdout)
    #     # status_matches = status_pattern.findall(result.stdout)
    #     # mac_matches = mac_pattern.findall(result.stdout)

    #     # print(hostname_matches)
    #     # print(status_matches)
    #     # print(mac_matches)


    #     # pattern = re.compile(r'Nmap scan report for (\S+).*?Host is (\S+).*?MAC Address: (\S*)?', re.DOTALL)
    #     pattern = re.compile(r'Nmap scan report for (\S+).*?Host is (\S+).*?MAC Address: (\S*)?.*?(\d+) hosts up', re.DOTALL)
    #     matches = pattern.findall(result.stdout)

    #     hosts_list = [(hostname.replace(".byteacs.com", ''), status, mac, numdevices) for hostname, status, mac, numdevices in matches]
    #     print(hosts_list)

    #     # ?: ... ) is a non-capturing group, and the ? at the end makes the entire group optional. 
    #     # \S+ Matches any non-whitespace character, one or more times ,+ requires at least one occurrence
    #     # \S* Matches any non-whitespace character, zero or more times
    #     # In " .*? "
    #     # " * " :to consume as much of the pattern as possible.

    #     # Create a list of tuples containing host, status, and MAC address
    #     # hosts_list = [(hostname, status, mac if mac else 'None') for hostname, status, mac in matches]
    #     # print(hosts_list)

    #     # nm = nmap.PortScanner()

    #     # Perform a ping scan on the specified IP range
    #     # nm.scan(hosts='192.168.23.0/24', arguments='-n -sP -PE -PA21,23,80,3389')
    #     # nm.scan(hosts='192.168.23.0/24', arguments='-sn')

    #     # Create a list of tuples containing host, status, and MAC address
    #     # output = [
    #     #     (
    #     #         nm[x]['addresses']['ipv4'], # ip address
    #     #         nm[x]['status']['state'], # Status: up or down
    #     #         nm[x]['addresses'].get('mac', None), # mac address
    #     #     )
    #     #     for x in nm.all_hosts()
    #     # ]
    #     # print(output)
    #     # hosts_list = [(host, status, mac) for host, status, mac in output]
    
    ['203.117.34-141.unknown.starhub.net.sg (203.117.34.141) at <incomplete> on wlan1', 'ec2-44-198-12-190.compute-1.amazonaws.com (44.198.12.190) at <incomplete> on wlan1', 'sd-in-f94.1e100.net (142.251.10.94) at <incomplete> on wlan1', 'a23-50-87-90.deploy.static.akamaitechnologies.com (23.50.87.90) at <incomplete> on wlan1', 'whatsapp-cdn-shv-02-sin6.fbcdn.net (157.240.13.54) at <incomplete> on wlan1', 'server-13-227-254-38.sin52.r.cloudfront.net (13.227.254.38) at <incomplete> on wlan1', 'ec2-18-233-79-135.compute-1.amazonaws.com (18.233.79.135) at <incomplete> on wlan1', 'ec2-52-21-215-185.compute-1.amazonaws.com (52.21.215.185) at <incomplete> on wlan1', 'ec2-52-73-54-128.compute-1.amazonaws.com (52.73.54.128) at <incomplete> on wlan1', 'ec2-54-87-90-34.compute-1.amazonaws.com (54.87.90.34) at <incomplete> on wlan1', 'sm-in-f190.1e100.net (142.250.4.190) at <incomplete> on wlan1', 'ec2-3-232-228-165.compute-1.amazonaws.com (3.232.228.165) at <incomplete> on wlan1', 'ec2-3-224-29-164.compute-1.amazonaws.com (3.224.29.164) at <incomplete> on wlan1', 'sc-in-f93.1e100.net (74.125.68.93) at <incomplete> on wlan1', 'sf-in-f95.1e100.net (74.125.24.95) at <incomplete> on wlan1', 'LAPTOP-1KKIANDS.byteacs.com (192.168.23.162) at 3c:9c:0f:61:3b:1d [ether] on wlan1', 'ec2-3-216-102-117.compute-1.amazonaws.com (3.216.102.117) at <incomplete> on wlan1']